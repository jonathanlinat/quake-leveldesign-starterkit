inputs:
  ARTIFACT_FILENAME:
    required: true
  ARTIFACT_REPOSITORY:
    required: true
  CICD_OPERATING_SYSTEM_NAME:
    required: true
runs:
  using: composite
  steps:
    - name: Checkout the artifact repository files
      uses: ./.github/actions/_shared/checkout-artifact-repository-files
      with:
        ARTIFACT_REPOSITORY: ${{ inputs.ARTIFACT_REPOSITORY }}
    - name: Set the current commit HEAD SHA
      uses: ./.github/actions/_shared/set-current-commit-head-sha
      with:
        CICD_WORKING_DIRECTORY: working-directory/
    - name: Restore the artifact from cache
      id: cache-restore
      uses: ./.github/actions/_shared/cache-restore
      with:
        PATH: working-directory/${{ inputs.ARTIFACT_FILENAME }}-files-${{ inputs.CICD_OPERATING_SYSTEM_NAME }}/
        CACHE_KEY: ${{ inputs.ARTIFACT_FILENAME }}-files-${{ inputs.CICD_OPERATING_SYSTEM_NAME }}-${{ env.GIT_CURRENT_COMMIT_HEAD_SHA }}
    - name: Set NuGet environment variables
      uses: ./.github/actions/_shared/set-nuget-environment
    - name: Set specific environment variables
      if: steps.cache-restore.outputs.CACHE_HIT != 'true'
      working-directory: working-directory/
      run: |
        set -euo pipefail
        echo "CC=gcc-13" >> $GITHUB_ENV
        echo "CXX=g++-13" >> $GITHUB_ENV
        echo "TB_PULL_REQUEST_HEAD_SHA=${{ env.GIT_CURRENT_COMMIT_HEAD_SHA }}" >> $GITHUB_ENV
        echo "VCPKG_BINARY_SOURCES=clear;nuget,${{ env.NUGET_FEED_URL }},readwrite" >> $GITHUB_ENV
        echo "VCPKG_EXE=${{ github.workspace }}/working-directory/vcpkg/vcpkg" >> $GITHUB_ENV
      shell: bash
    - name: Install dependencies
      if: steps.cache-restore.outputs.CACHE_HIT != 'true'
      working-directory: working-directory/
      run: |
        set -euo pipefail
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt update
        sudo apt install -y --no-install-recommends gcc-13 g++-13 build-essential libxi-dev libxrandr-dev libxxf86vm-dev freeglut3-dev mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev libglm-dev pandoc ninja-build libglew-dev libfreeimage-dev libfreetype6-dev libtinyxml2-dev libassimp-dev libfuse2 mono-complete
      shell: bash
    - name: Bootstrap vcpkg
      if: steps.cache-restore.outputs.CACHE_HIT != 'true'
      working-directory: working-directory/
      run: |
        set -euo pipefail
        ./vcpkg/bootstrap-vcpkg.sh -disableMetrics
      shell: bash
    - name: Add NuGet sources
      if: steps.cache-restore.outputs.CACHE_HIT != 'true'
      working-directory: working-directory/
      run: |
        set -euo pipefail
        mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
          sources add \
          -Source "${{ env.NUGET_FEED_URL }}" \
          -StorePasswordInClearText \
          -Name GitHubPackages \
          -UserName "${{ env.NUGET_USERNAME }}" \
          -Password "${{ github.token }}"
        mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
          setapikey "${{ github.token }}" \
          -Source "${{ env.NUGET_FEED_URL }}"
      shell: bash
    - name: Install Qt
      if: steps.cache-restore.outputs.CACHE_HIT != 'true'
      uses: ./.github/actions/_shared/install-qt
      with:
        CICD_OPERATING_SYSTEM_NAME: ${{ inputs.CICD_OPERATING_SYSTEM_NAME }}
        QT_VERSION: 6.8.0
    - name: Compile the source code
      if: steps.cache-restore.outputs.CACHE_HIT != 'true'
      working-directory: working-directory/
      run: |
        set -euo pipefail
        ./CI-linux.sh
      shell: bash
    - name: Prepare the artifact
      if: steps.cache-restore.outputs.CACHE_HIT != 'true'
      working-directory: working-directory/
      run: |
        set -euo pipefail
        mkdir -p ${{ inputs.ARTIFACT_FILENAME }}-files-${{ inputs.CICD_OPERATING_SYSTEM_NAME }}/
        mv cmakebuild/TrenchBroom-* ${{ inputs.ARTIFACT_FILENAME }}-files-${{ inputs.CICD_OPERATING_SYSTEM_NAME }}/
      shell: bash
    - name: Save the artifact as cache
      if: steps.cache-restore.outputs.CACHE_HIT != 'true'
      uses: ./.github/actions/_shared/cache-save
      with:
        PATH: working-directory/${{ inputs.ARTIFACT_FILENAME }}-files-${{ inputs.CICD_OPERATING_SYSTEM_NAME }}/
        CACHE_KEY: ${{ inputs.ARTIFACT_FILENAME }}-files-${{ inputs.CICD_OPERATING_SYSTEM_NAME }}-${{ env.GIT_CURRENT_COMMIT_HEAD_SHA }}
